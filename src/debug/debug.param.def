/* Copyright 2020 HPS/SAFARI Research Groups
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* -*- Mode: c -*- */

/* These ".param.def" files contain the various parameters that can be given to the
   simulator.  NOTE: Don't screw around with the order of these macro fields without
   fixing the etags regexps.

   DEF_PARAM(  Option, Variable Name, Type, Function, Default Value, Const) 

   Option -- The name of the parameter when given on the command line (eg. "--param_0").
	   All parameters take an argument.  Thus, "--param_0=3" would be a valid
	   specification.

   Variable Name -- The name of the variable that will be created in 'parameters.c' and
	    externed in 'parameters.h'.

   Type -- The type of the variable that will be created in 'parameters.c' and externed
	   in 'parameters.h'.

   Function -- The name of the function declared in 'parameters.c' that will parse the
	    text after the '='.

   Default Value -- The default value that the variable created will have.  This must be
	    the same type as the 'Type' field indicates (or be able to be cast to it).

   Const -- Put the word "const" here if you want this parameter to be constant.  An
	    error messsage will be printed if the user tries to set it with a command
	    line option.

*/

// TODO: a lot of unused debug parameters here...need to prune them

DEF_PARAM(  debug_cycle_start,     DEBUG_CYCLE_START,     uns,   uns,   0,      )
DEF_PARAM(  debug_cycle_stop,      DEBUG_CYCLE_STOP,      uns,   uns,   0,      )
DEF_PARAM(  debug_time_start,      DEBUG_TIME_START,      uns64, uns64, 0,      )
DEF_PARAM(  debug_time_stop,       DEBUG_TIME_STOP,       uns64, uns64, 0,      )
DEF_PARAM(  debug_inst_start,      DEBUG_INST_START,      uns,   uns,   0,      )
DEF_PARAM(  debug_inst_stop,       DEBUG_INST_STOP,       uns,   uns,   0,      )
DEF_PARAM(  debug_op_start,        DEBUG_OP_START,        uns,   uns,   0,      )
DEF_PARAM(  debug_op_stop,         DEBUG_OP_STOP,         uns,   uns,   0,      )

DEF_PARAM(  debug_cache_lib,       DEBUG_CACHE_LIB,       Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_hash_lib,        DEBUG_HASH_LIB,        Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_list_lib,        DEBUG_LIST_LIB,        Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_port_lib,        DEBUG_PORT_LIB,        Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_bus_lib,         DEBUG_BUS_LIB,         Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_op_pool,         DEBUG_OP_POOL,         Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_oracle,          DEBUG_ORACLE,          Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_frontend,        DEBUG_FRONTEND,        Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_addr_trans,      DEBUG_ADDR_TRANS,      Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_bp,              DEBUG_BP,              Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_bp_dir,          DEBUG_BP_DIR,          Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_btb,             DEBUG_BTB,             Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_crs,             DEBUG_CRS,             Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_map,             DEBUG_MAP,             Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_memory,          DEBUG_MEMORY,          Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_replay,          DEBUG_REPLAY,          Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_freq,            DEBUG_FREQ,            Flag,  Flag,  FALSE,  )

DEF_PARAM(  debug_model,           DEBUG_MODEL,           Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_thread,          DEBUG_THREAD,          Flag,  Flag,  FALSE,  )

DEF_PARAM(  debug_icache_stage,    DEBUG_ICACHE_STAGE,    Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_decode_stage,    DEBUG_DECODE_STAGE,    Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_map_stage,       DEBUG_MAP_STAGE,       Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_node_stage,      DEBUG_NODE_STAGE,      Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_exec_stage,      DEBUG_EXEC_STAGE,      Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_dcache_stage,    DEBUG_DCACHE_STAGE,    Flag,  Flag,  FALSE,  )

DEF_PARAM(  debug_retired_uops,    DEBUG_RETIRED_UOPS,    Flag,  Flag,  FALSE,  )

DEF_PARAM(  debug_exc_inserts,     DEBUG_EXC_INSERTS,     Flag,  Flag,  FALSE,  )

DEF_PARAM(  debug_bp_conf,         DEBUG_BP_CONF,         Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_onpath_conf,     DEBUG_ONPATH_CONF,     Flag,  Flag,  FALSE,  )

DEF_PARAM(  debug_stream,          DEBUG_STREAM,          Flag,  Flag,  FALSE,  )
DEF_PARAM(  debug_stream_mem,      DEBUG_STREAM_MEM,      Flag,  Flag,  FALSE,  )

DEF_PARAM( debug_way                               , DEBUG_WAY                            , Flag    , Flag      , FALSE   ,       )
DEF_PARAM( debug_l2markv                           , DEBUG_L2MARKV                        , Flag    , Flag      , FALSE   ,       )
DEF_PARAM( debug_l2l1pref                          , DEBUG_L2L1PREF                       , Flag    , Flag      , FALSE   ,       )

DEF_PARAM( debug_perf_pred                         , DEBUG_PERF_PRED                      , Flag    , Flag      , FALSE   ,       )

DEF_PARAM( debug_power_utils                       , DEBUG_POWER_UTILS                    , Flag    , Flag      , FALSE   ,       )
DEF_PARAM( debug_dvfs                              , DEBUG_DVFS                           , Flag    , Flag      , FALSE   ,       )

DEF_PARAM( debug_trace_read                        , DEBUG_TRACE_READ                     , Flag    , Flag      , FALSE   ,       )

DEF_PARAM( debug_pin_exec_driven                   , DEBUG_PIN_EXEC_DRIVEN                , Flag    , Flag      , FALSE   ,       )

DEF_PARAM( debug_cache_part                        , DEBUG_CACHE_PART                     , Flag    , Flag      , FALSE   ,       )

DEF_PARAM( debug_optimizer2                        , DEBUG_OPTIMIZER2                     , Flag    , Flag      , FALSE   ,       )
DEF_PARAM( debug_pref                              , DEBUG_PREF                          , Flag            , Flag               , FALSE     ,    )
